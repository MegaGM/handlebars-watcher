#!/usr/bin/env node

/* ================================================
 * Meow! :3
 * ===============================================*/
'use strict'
const
  colors = require('colors'),
  fs = require('fs-extra'),
  path = require('path'),
  ora = require('ora'),
  resolve = path.resolve,
  packageJson = require(resolve(__dirname, '../package.json')),
  {
    readFile,
    writeFile,
    removeFile,
    showInfo,
    showError,
    singular,
    getFileStats,
  } = require('./helpers')
let
  cwd = process.cwd(),
  config = {
    appName: 'Handlebars:'.yellow,
    filename: 'handlebars.config.js',
    filepath: null,
    appIsReady: false,
    howto: '\nRead howto: https://github.com/MegaGM/ya-handlebars-bundler#readme',
    spinner: ora(),
    init() {
      this.spinner.start('Loading...')
      this.filepath = resolve(cwd, this.filename)
      delete this.init
      return this
    },
  }.init(),
  howto = config.howto,
  cc = null // clientConfig

/**
 * check if there is ${config.filename} file in cwd
 */
try {
  cc = require(config.filepath)
} catch (err) {
  if ('MODULE_NOT_FOUND' === err.code)
    return showError(`There is no ${config.filename.red} in this directory! ${howto}`)

  showError('Unhandled exception O_o'.red)
  throw err
}

/**
 * ^,..,^
 */
global.config = config // to use in hash.js
global.spinner = config.spinner
global.VERBOSE = false

{ // clientConfig scope
  /**
   * deal with clientConfig.entry
   */
  let
    e = cc.entry,
    ce = `config['entry']`.red
  if (!e)
    return showError(`${ce} MUST be presented in ${config.filename.red} ${howto}`)

  if (!e.helpers && !e.partials && !e.templates)
    return showError(`${ce} MUST contain at least one of the props: helpers, partials, teamplates ${howto}`)

  // resolve abs paths
  e.helpers = e.helpers ? resolve(cwd, e.helpers) : 'templates/helpers'
  e.partials = e.partials ? resolve(cwd, e.partials) : 'templates/partials'
  e.templates = e.templates ? resolve(cwd, e.templates) : 'templates/templates'

  /**
   * deal with clientConfig.output
   */
  let
    o = cc.output,
    co = `config['output']`.red
  if (!o)
    return showError(`${co} MUST be presented in ${config.filename.red} ${howto}`)

  if (!o.filename)
    return showError(`${co} MUST contain: filename ${howto}`)

  // filename.js => filename
  o.filename = o.filename.replace(/\.js$/i, '')
  // filename => filename[.min].js
  o.filename = o.filename + (o.minify ? '.min' : '') + '.js'

  o.minify = !!o.minify
  o.bundleFilepath = resolve(cwd, o.path || '', o.filename)

  /**
   * deal with options
   */
  VERBOSE = cc.options && cc.options.verbose

  /**
   * merge clientConfig into config
   */
  config = Object.assign(config, cc)
} // clientConfig scope

/**
 * create all the directories just in case :D
 */
let shouldExist = [
  resolve(cwd, config.output.path || ''),
]

shouldExist.forEach(dir => {
  try {
    fs.ensureDirSync(dir)
  } catch (err) {
    showError('error while creating directory: '.red, dir)
    throw err
  }
})

/* ================================================
 * Start its job!
 + instanciate Hash
 + setup Watcher
 + on changes: update Hash, bundle entire hash, minify and write
 * ===============================================*/
const
  chokidar = require('chokidar')
let
  hash = require('./hash'),
  watcherDirs = [config.filepath],
  watcherOptions = { ignored: /[\/\\]\./i }

for (let d in config.entry)
  watcherDirs.push(config.entry[d])

let watcher = chokidar.watch(watcherDirs, watcherOptions)

// 'add' will be invoked for each new file on startup and then
watcher.on('add', filepath => {
  if (filepath === config.filepath) return // ignore handlebars.config.js

  let file = hash.add(filepath)
  if (!file)
    return showError('Something went wrong while adding:'.red + '\n' +
      filepath + '\nThe file has not been added due to some errors!')

  if (config.appIsReady)
    hash.updateBundle()

  VERBOSE && spinner.succeed(`added ${singular(file.type)}: ` + path.join(file.relativeDir, file.name).cyan)
})

watcher.on('ready', () => {
  config.appIsReady = true
  VERBOSE && console.info()
  setTimeout(() => {
    spinner.succeed('Yet Another Handlebars Bundler ' + 'v.'.yellow + packageJson.version.yellow + ' monitoring is active! ^_^')
  }, VERBOSE ? 0 : 444)

  // concat entire hash, minify, write to disk
  hash.updateBundle()

  watcher.on('change', filepath => {
    if (filepath === config.filepath)
      return showError(`Configuration file ${config.filename} has been changed. `.red + 'Please restart the application!')

    // spinner.start('updating')
    let file = hash.update(filepath)
    if (!file) {
      spinner.fail()
      return showError('Something went wrong while updating: \n'.red + filepath + '\nThe file has not been updated due some errors!')
    }

    // VERBOSE && showInfo(`updated ${singular(file.type)} ` + path.join(file.relativeDir, file.base).cyan)
    spinner.succeed(`updated ${singular(file.type)}: ` + path.join(file.relativeDir, file.base).cyan)
    hash.updateBundle()
  })

  watcher.on('unlink', filepath => {
    if (filepath === config.filepath)
      return showError('Configuration file has been deleted, '.red + 'please give it back to me :\'('.cyan)

    let file = hash.remove(filepath)
    if (!file)
      return showError('Something went wrong while removing: \n'.red + filepath + '\nThe file has not been removed due to some errors!')

    spinner.warn('removed ' + path.join(file.relativeDir, file.base).red)
    // VERBOSE && showInfo('removed ' + path.join(file.relativeDir, file.base).red)
    hash.updateBundle()
  })

  watcher.on('addDir', dir => {
    watcher.add(dir)
    spinner.succeed('added dir ' + dir.yellow)
  })

  watcher.on('unlinkDir', dir => {
    watcher.unwatch(dir)
    spinner.warn('removed dir ' + dir.replace(cwd + '/', '').red)
  })
})
