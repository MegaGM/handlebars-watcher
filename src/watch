#!/usr/bin/env node

'use strict'

/* ================================================
 * Startup dependencies
 * ===============================================*/
const
  colors = require('colors'),
  fs = require('fs-extra'),
  path = require('path'),
  resolve = path.resolve
let
  cwd = process.cwd(),
  config = null,
  configFilename = 'handlebars.config.js',
  appName = 'Handlebars Builder:'.yellow,
  packageJson = require(resolve(__dirname, '../package.json'))

/**
 * check if there is ${configFilename} file in cwd
 */
try {
  config = require(resolve(cwd, configFilename))
} catch (err) {
  if ('MODULE_NOT_FOUND' === err.code)
    return console.error(`${appName} There is no ${configFilename} in this directory!`)
  return console.error('Unhandled exception O_o'.red, err)
}

/**
 * check and normalize internal app config, which is based on ${configFilename} file
 */
global.config = config // make it global to use in hash.js

config.filename = configFilename
config.filepath = resolve(cwd, config.filename)
config.appName = appName
config.appIsReady = false

/**
 * check and normalize config.entry
 */
if (!config.entry ||
  !config.entry.helpers || !config.entry.partials || !config.entry.templates)
  return showErrorMessageWithConfigHelp(`config.entry MUST be presented and contain: helpers, partials and teamplates directives!`)
// resolve abs paths
config.entry.helpers = resolve(cwd, config.entry.helpers)
config.entry.partials = resolve(cwd, config.entry.partials)
config.entry.templates = resolve(cwd, config.entry.templates)

/**
 * check and normalize config.output
 */
if (!config.output ||
  !config.output.path || !config.output.filename)
  return showErrorMessageWithConfigHelp(`config.output MUST be presented and contain at least: path and filename directives!`)

config.output.minify = !!config.output.minify

if ('.js' !== config.output.filename.substr(-3)) {
  let filename = config.output.filename + (config.output.minify ? '.min' : '') + '.js'
  config.output.filename = filename
}
if (-1 !== config.output.filename.indexOf('/'))
  return showErrorMessageWithConfigHelp(`config.output.filename MUST be a valid filename, not a filepath, but you specified: ${config.output.filename}`)

config.output.bundleFile = resolve(cwd, config.output.path, config.output.filename)

/**
 * create all operating directories just in case
 */
let shouldExist = [
  config.output.path,
  resolve(config.entry.helpers),
  resolve(config.entry.partials),
  resolve(config.entry.templates),
]

shouldExist.forEach(dir => {
  try {
    fs.ensureDirSync(dir)
  } catch (err) {
    console.error(config.appName, 'error when creating directory: '.red, dir)
    throw err
  }
})

/* ================================================
 * Start its job!
 + instanciate Hash
 + setup Watcher
 + on changes: update Hash, bundle entire hash, minify and write
 * ===============================================*/
let hash = require('./hash'),
  chokidar = require('chokidar')

let watcherDirs = [
    config.filepath,
    config.entry.helpers,
    config.entry.partials,
    config.entry.templates,
  ],
  watcherOptions = {
    ignored: /[\/\\]\./i
  }

let watcher = chokidar.watch(watcherDirs, watcherOptions)

// add files on startup
watcher.on('add', filepath => {
  if (filepath === config.filepath) return

  let file = hash.add(filepath)
  if (!file)
    return console.error(config.appName, 'Something went wrong while adding:'.red, '\n' + filepath, '\nThe file has not been added due some errors!')

  console.info(config.appName, 'added', path.join(file.relativeDir, file.base))
  if (config.appIsReady)
    hash.updateBundle()
})

watcher.on('ready', () => {
  config.appIsReady = true
  console.info('\n' + config.appName, 'v.'.yellow + packageJson.version.yellow, 'monitoring is active! ^_^')

  // concat entire hash, minify, write to disk
  hash.updateBundle()

  watcher.on('change', filepath => {
    if (filepath === config.filepath)
      return console.error(config.appName, 'Configuration file has been changed,'.red, 'please restart the application!'.cyan)

    let file = hash.update(filepath)
    if (!file)
      return console.error(config.appName, 'Something went wrong while updating: '.red, filepath, '\nThe file has not been updated due some errors!')

    console.info(config.appName, 'updated'.cyan, path.join(file.relativeDir, file.base))
    hash.updateBundle()
  })

  watcher.on('unlink', filepath => {
    if (filepath === config.filepath)
      return console.error(config.appName, 'Configuration file has been deleted,'.red, 'please give it back to me :\'('.cyan)

    let file = hash.remove(filepath)
    if (!file)
      return console.error(config.appName, 'Something went wrong while removing: '.red, filepath, '\nThe file has not been removed due some errors!')

    console.info(config.appName, 'removed'.red, path.join(file.relativeDir, file.base))
    hash.updateBundle()
  })

  watcher.on('addDir', dir => {
    console.info(config.appName, 'added', dir)
    watcher.add(dir)
  })

  watcher.on('unlinkDir', dir => {
    console.log(config.appName, 'directory has been removed', dir.replace(config.raw, ''))
    watcher.unwatch(dir)
  })
})

function showErrorMessageWithConfigHelp(message) {
  return console.error(config.appName, message)
}
